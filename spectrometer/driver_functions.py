
function_descriptions = {
    "_appendSpace": "Internal helper function, likely formats strings by adding space padding.",
    "_get_params": "Possibly retrieves current driver or device parameters (internal use).",
    "_load_firmware": "Loads firmware into the spectrometer device (use with caution).",
    "_plot_spectrum": "Plots spectral data, likely using matplotlib (development/debug tool).",
    "_print_data": "Prints spectrum data to the console in a readable format.",
    "_print_info": "Prints device information (e.g., serial, model, configuration).",
    "_resource_path": "Used to resolve paths to resources or data files, useful when packaged.",
    "_run_perf_test": "Runs internal performance tests to benchmark acquisition or I/O speed.",
    "_set_usb_config": "Configures USB communication settings (e.g., timeouts or buffers).",
    "abort": "Halts ongoing data acquisition or operations on the device.",
    "allowBurst": "Enables burst mode, allowing rapid acquisition without blocking on each frame.",
    "array_get_spec": "Initializes the spectrometer and returns both device handle and wavelength array.",
    "array_get_spec_only": "Returns just the spectrometer device handle, no wavelength data.",
    "array_spectrum": "Returns intensity (Y) values using a provided wavelength (X) array.",
    "deviceConnectionCheck": "Verifies if the device is still connected and responsive.",
    "ext_trig": "Enables or disables external trigger mode on the spectrometer.",
    "find_devices": "Scans and returns all USB-connected StellarNet spectrometers.",
    "getBurstFifo_Y": "Captures spectral data in high-speed burst FIFO mode (Y data only).",
    "getCoeffs": "Retrieves calibration coefficients from the device.",
    "getDeviceHotPixels": "Returns a list of hot/dead pixels marked on the device.",
    "getDeviceId": "Returns a human-readable device ID (usually model or serial).",
    "getDeviceParam": "Gets current acquisition parameters: integration time, smoothing, etc.",
    "getFullDeviceID": "Returns a full unique identifier for the spectrometer (model+serial).",
    "getGain": "Returns the current analog gain value or setting.",
    "getGainTable": "Returns the full gain calibration table from the device.",
    "getIntTimeRange": "Returns the minimum and maximum allowed integration time.",
    "getSpectrum_X": "Returns the wavelength array (X values).",
    "getSpectrum_Y": "Returns the spectral intensity data (Y values).",
    "installDeviceDriver": "Installs the necessary USB driver for Windows (requires admin).",
    "main": "Likely a test/demo main function included for development.",
    "reset": "Closes communication with the device and releases the handle.",
    "select_device": "Used for manually selecting a device if more than one is connected.",
    "setParam": "Sets acquisition parameters: integration time, averaging, smoothing, etc.",
    "setParam_dict": "Same as setParam but takes a dictionary of parameter keys/values.",
    "setTempComp": "Enables or configures temperature compensation feature.",
    "setTemporary_baseline": "Applies a temporary signal baseline offset (not saved to EEPROM).",
    "setTemporary_gain": "Applies a temporary analog gain level.",
    "setVerbose": "Enables or disables verbose debug output in console.",
    "setup_ZAP": "Configures ZAP gain levels (Zero Amplifier Profile â€“ advanced users).",
    "total_device_count": "Returns the number of detected StellarNet spectrometers.",
    "uninstallDeviceDriver": "Uninstalls USB driver (Windows only, requires admin).",
    "updateReadDeviceInfo": "Forces a re-read of the connected device's info/state.",
    "version": "Returns the driver version and build date string.",
    "writeEEPROM_Coeff": "Writes new calibration coefficients to EEPROM (permanent change).",
    "writeEEPROM_HotPixels": "Updates the list of hot pixels on the device EEPROM.",
    "writeEEPROM_deviceInfo": "Overwrites device metadata in EEPROM (model, serial, etc.).",
    "writeEEPROM_setupZAP": "Writes ZAP gain setup parameters to EEPROM (advanced)."
}

# Print all function descriptions
for func, desc in function_descriptions.items():
    print(f"{func}:\n  {desc}\n")
